1.
The application is used as a Keycloak client in order to test OAuth2 authorization flow grant.

2.
The application runs on http://localhost:9094 and exposes two pages that
are protected by OAuth2 authorization flow grant:

http://localhost:9094
http://localhost:9094/nested

3.
Attempt to access any of the URL in #2 above, causes redirect to Keycloak that
runs on http://keycloak-http:9999/.
More specifically, the URL is defined as http://keycloak-http:9999/auth/realms/mytest1/protocol/openid-connect/auth
in AUTH_URL value of keycloak-integration/auth-code-client/.env file.

The full URL that is constructed in the interceptor.go using this line of code u := config.AuthCodeURL("")  is
http://keycloak-http:9999/auth/realms/mytest1/protocol/openid-connect/auth?client_id=keycloak-integration-app&redirect_uri=http%3A%2F%2Flocalhost%3A9094%2Foauth2&response_type=code
and includes the URL to return to - http://localhost:9094/oauth2

4.
User logs in with his username and password (myuser1 and 123) and is being redirected back to return URL
from #3 above - http://localhost:9094/oauth2

5.
Then the token is obtained on server side using token endpoint defined in keycloak-integration/auth-code-client/.env file
TOKEN_URL=http://keycloak-http:9999/auth/realms/mytest1/protocol/openid-connect/token

6.
Once token is obtained, new session with token within it will be created and stored in the map in
C:\branches\keycloak-integration\auth-code-client\session\service\session_store.go

The key to the map will be new UUID value.

Then cookie named SESSION_ID will be created with id equals to UUID above.
Finally, the redirect to home page will be performed and cookie will be received by browser.

7.
Upon new request to get nested or home UI page, the cookie will be received on server,
corresponding session and then token will be found. Token expiration will be checked.
If token is not expired yet (by default valid for 5 minutes in keycloak) - then UI page will be returned.

If expired, refresh token will be used to obtain new token and refresh token which will be stored in session
and UI page will be returned.
Refresh token is valid for minimum between whatever remained of default 10 hours of "SSO Session Max"
and full default 30 minutes of "SSO Session Idle" defined in Keycloak. Any attempt to use refresh token
to get a new refresh/token pair, will grant additional default 30 minutes per "SSO Session Idle" and so on and so forth until
full 10 hours per "SSO Session Max". So basically if session is not idle (i.e user requests some pages each 30 minutes),
no re-login attempts will be required for full 10 hours.
See more here - https://stackoverflow.com/questions/52040265/how-to-specify-refresh-tokens-lifespan-in-keycloak

If session was idle for 30 min or 10 hours elapsed, the redirect to Keycloak will be done and full flow will be completed
as explained in points #3 - #6 above.

Important - we never arrive to situation where refresh token is not valid anymore but session vs Keycloak is valid.
Because session vs Keycloak is defined through its own cookie which has lifespan same as refresh token - i.e minimum
between "SSO Session Max" and "SSO Session Idle". If that wouldn't be the case, the user would be redirected to Keycloak
without the need to login (Keycloak cookie is still valid) - and then redirected back to app home page. That would be
confusing experience for the user because instead of seeing the requested page, user would see the home page without
encountering login screen !

8.
The needed configuration in Keycloak to support the interaction above was to create OAuth2 client, user, role and map
user to role as explained here - https://www.baeldung.com/spring-boot-keycloak

9.
Summary of Keycloak cookie management with real interaction examples vs Keycloak can be found at -
C:\branches\keycloak-integration\auth-code-client\backup\keycloak-cookie-mgmt.txt