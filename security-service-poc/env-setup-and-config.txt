1.
Install Docker CE (community edition)
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-22-04

Add your user to docker group (Minikube can't be run without that)  ---- sudo usermod -aG docker $USER && newgrp docker   

2.
Install Minikube using docker driver - this basically means that K8s will run WITHIN the Docker container !
https://www.linuxtechi.com/how-to-install-minikube-on-ubuntu/

3.
Validate Docker/K8s/kubectl setup

3.1
kubectl config view

3.2
Install NGINX and test access from the VM
https://nonanom.medium.com/run-nginx-on-kubernetes-ee6ea937bc99


kubectl port-forward service/nginx 8080:80
curl http://localhost:8080

4.
Install Istio
https://istio.io/latest/docs/setup/getting-started/#download

5.
Validate Istio

5.1
Install those files - https://github.com/shpboris/users-in-mem-app/tree/master/deployment

5.2
Istio ingress is just a regular K8s service, so port forwarding to it should be no different
than to any other service!

SSH to you remote VM like this

ssh 172.26.1.156

Figure out the port from looking on the output of 
kubectl -n istio-system get service istio-ingressgateway.

Another approach is to do the following
kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}'

Result in my case is port 80.

Port forward 30009 to 80 from any interface on the remote Linux VM machine! 
"Any interface" here means including external interface of the Linux VM machine to which the traffic will arrive from laptop.
kubectl -n istio-system port-forward svc/istio-ingressgateway --address 0.0.0.0 30009:80
More on this port forwarding
http://blog.data-alchemy.org/tips/remote-minikube/

On the laptop do SSH tunnelling so all traffic sent to localhost 7777 will arrive to 172.26.1.156:30009 via jumphost 10.239.37.204
ssh -fNT -L 7777:172.26.1.156:30009 10.239.37.204
More on SSH tunneling 
https://www.concordia.ca/ginacody/aits/support/faq/ssh-tunnel.html

Now access you app UI from the laptop !
http://localhost:7777/env1/swagger-ui.html

[Same flow for testing NGINX installed in #3.2 above
kubectl port-forward svc/nginx --address 0.0.0.0 30008:80
ssh -fNT -L 9999:172.26.1.156:30008 10.239.37.204
http://localhost:9999/]

5.3
Those are official Istio instructions (from here https://istio.io/latest/docs/setup/getting-started/#download),
but they are useful only for access from the local machine 
where Istio is installed. Might be useful for something, but practically needs to do #5.2 instead.

Start tunneling in separate window
minikube tunnel

Get Minikube IP like this 
kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

Returns 10.104.108.60

Get port like this
kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}'

Returns 80

Now test
curl http://10.104.108.60:80/env1/swagger-ui.html

6.
Install Helm
snap install helm --classic

More options here
https://www.how2shout.com/linux/how-to-install-helm-on-ubuntu-22-04-lts-jammy/

7.
Install Keycloak

Add bitnami repo
helm repo add bitnami https://charts.bitnami.com/bitnami

Get the chart install parameters
helm show values bitnami/keycloak > keycloak-values.yaml
Edit the keycloak-values.yaml and set adminUser to admin and adminPassword to 123 (can choose any other values)

Now install the chart
helm install keycloak bitnami/keycloak -f keycloak-values.yaml

To uninstall
helm delete keycloak

Find the PVC and PV
kubectl get pvc
kubectl get pv

Then needs to delete PVC (which deletes a PV)
kubectl delete pvc data-keycloak-postgresql-0

8.
kubectl port-forward svc/keycloak --address 0.0.0.0 30010:80
ssh -fNT -L 4444:172.26.1.156:30010 10.239.37.204
http://localhost:4444/auth


8.
Validate Keycloak

8.1
Validate locally

Create pod to run curl
kubectl run my-curl --image=radial/busyboxplus:curl -it

Execute curl
curl http://keycloak:80

In future the pod can be reused after executing
kubectl attach my-curl -it

8.2
Validate from laptop

Configure on Linux VM
kubectl port-forward svc/keycloak --address 0.0.0.0 30010:80

Do on laptop's cmd
ssh -fNT -L 80:172.26.1.156:30010 10.239.37.204

Add keycloak to existing hosts file
127.0.0.1 localhost keycloak-http keycloak

Access from browser
http://keycloak:80

Or alternatively
http://keycloak

9.
Full env connectivity config 

9.0
SSH to you remote VM like this
ssh 172.26.1.156

9.1
Keycloak SSH tunnel on Win (not needed for Keycloak through Istio ingress scenario)
ssh -fNT -L 80:172.26.1.156:30010 10.239.37.204

Istio Ingress SSH tunnel on Win
ssh -fNT -L 30000:172.26.1.156:30000 10.239.37.204

9.2
Keycloak port forwarding on VM (not needed for Keycloak through Istio ingress scenario)
kubectl port-forward svc/keycloak --address 0.0.0.0 30010:80

Ingress port forwarding on VM
kubectl -n istio-system port-forward svc/istio-ingressgateway --address 0.0.0.0 30000:80

10.
Apply and validate Lua

Apply filter (from keycloak-integration\security-service-poc\backup folder)
kubectl apply -f my-simple-filter.yaml

Do a request
http://localhost:30000/env1/swagger-ui.html

Get pods and check logs of Istio ingress pod
kubectl -n istio-system get pods
kubectl -n istio-system logs istio-ingressgateway-67f7b5f88d-8q7qs

11.
Build the microsevices' images and push to DockerHub

nerdctl login registry-1.docker.io

nerdctl --namespace k8s.io build -t shpboris/security-service .
nerdctl --namespace k8s.io push shpboris/security-service

nerdctl --namespace k8s.io build -t shpboris/frontend .
nerdctl --namespace k8s.io push shpboris/frontend

12.
Create the environment's microservices, gateway and filter 

12.1
Create gateway and Lua filter
kubectl apply -f gateway.yml
kubectl apply -f ingress-filter.yml
from this folder - keycloak-integration\security-service-poc\deploy-common
[for Keycloak through Istio ingress scenario from this folder -
keycloak-integration\security-service-poc\deploy-common\keycloak-ingress-access-http]

12.2
Create security and frontend microservices
kubectl apply -f deploy-all.yml
from this folder - keycloak-integration\security-service-poc\security-service\deploy
[for Keycloak through Istio ingress scenario from this folder -
keycloak-integration\security-service-poc\security-service\deploy\keycloak-ingress-access-http]

kubectl apply -f deploy-all.yml
from this folder - keycloak-integration\security-service-poc\frontend\deploy

13.
To initiate the flow, type this in browser - http://localhost:30000/frontend/nested

14.
Keycloak through Istio ingress scenario setup and issuer problem resolution

Basically, the setup consists of the following parts:
-Setup Keycloak on a separate path (/auth) so it will be possible to distinguish its traffic on Ingress and route to Keycloak
-Pass X-Forwarded-Port (and optionally(?) other X-Forwarded-* headers like Host) so Keycloak will build its links in UI properly
-Create a user in Keycloak and give it realm admin role so he will be able to call Keycloak admin console's APIs
-Configure Frontend URL so Keycloak will not fail due to issuer problem (see remarks.txt for theory)

14.1
Setup Keycloak on a separate path (/auth)

Uninstall bitnami/keycloak if exists.

Edit httpRelativePath value to be "/auth/" in keycloak-values.yaml file when re-deploying
bitnami/keycloak chart.
Another option is to adjust the installation instruction itself to be - helm install keycloak --set httpRelativePath=/auth/ bitnami/keycloak

In any case, pay attention to the trailing slash in /auth/ !
Without it readiness probe of the pod will fail due to probe URL missing a slash like here.
Readiness probe failed: Get "http://10.42.0.214:8080/authrealms/master".

Additional point, when doing redeploy of the chart ALWAYS make sure to delete the corresponding persistence
volume claim (which seems to delete the volume itself too). Anyway, PV and PVC should be deleted before starting a new deploy.

Check #7 above for details.

14.2
Adding X-Forwarded-* headers

Practically, the only missing part is X-Forwarded-Port as the others (Host, X-Forwarded-For already added by Istio).
For a quick initial testing I added the header manually through Chrome's "Modify Headers" browser plugin.
-URL pattern was defined as - http://localhost:30000/auth*
-Header name - X-Forwarded-Port
-Value - 30000

In a real scenario the needed headers are set in my Lua filter.

14.3
Create a user and give it realm admin role

See the following (first link explains a crazy catch in UI!) -
https://keycloak.discourse.group/t/how-to-create-admin-for-local-realm/18853/2
https://stackoverflow.com/questions/56743109/keycloak-create-admin-user-in-a-realm

14.4
Configure Frontend URL

Put the following in Frontend URL field of the relevant realm settings (in my case in realm setting of realm named test1)
http://localhost:30000/auth/

Additional option, when running standalone Keycloak exe locally on Windows is to add --hostname-url http://keycloak-http:8080/auth
like in running instruction below:
"C:\Users\shpilb\keycloak\keycloak1-19.0.3\bin\kc.bat" start-dev --http-relative-path /auth --hostname-url http://keycloak-http:8080/auth --proxy=edge

May be this hostname-url parameter can be passed to Bitnami chart's Keycloak through env vars or some other way ?
It might be worth checking as it will affect all the realms and will eliminate a need for configuring this through UI.


15.
Configuring HTTPS over Istio ingress for both my services and Keycloak UI

15.1
Generate keys/certs and create Istio TLS credential

openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=myca Inc./CN=myca.com' -keyout myca.com.key -out myca.com.crt
openssl req -out localhost.csr -newkey rsa:2048 -nodes -keyout localhost.key -subj "/CN=localhost/O=myorg"
openssl x509 -req -sha256 -days 365 -CA myca.com.crt -CAkey myca.com.key -set_serial 0 -in localhost.csr -out localhost.crt

kubectl create -n istio-system secret tls localhost-credential --key=localhost.key --cert=localhost.crt

[See more here - https://istio.io/latest/docs/tasks/traffic-management/ingress/secure-ingress/]

15.2
Configure Gateway endpoint on port 443 with credential from #15.1 above

We are not replacing HTTP endpoint with HTTPS one, but adding a new HTTP endpoint.
See - keycloak-integration\security-service-poc\deploy-common\keycloak-ingress-access-https\gateway.yml

15.3
Change all external URLs related to my services to works with HTTPS protocol

Changes are:

REDIRECT_URL: https://localhost:30000/security/oauth2
AUTH_URL: https://localhost:30000/auth/realms/mytest1/protocol/openid-connect/auth
HOME_PAGE_URL: https://localhost:30000/frontend

See - keycloak-integration\security-service-poc\security-service\deploy\keycloak-ingress-access-https\config-map.yml
And also same config map here - keycloak-integration\security-service-poc\security-service\deploy\keycloak-ingress-access-https\deploy-all.yml

15.4
Change Frontend URLs for master (needed for Keycloak UI) and mytest1 realms

The Frontend URL should be the following in both realms:
https://localhost:30000/auth/

Is this really is needed for master ? One of Keycloak UI URLs had http protocol scheme despite
X-Forwarded-Proto set to https in Lua filter - but may be it was due to previously remained Frontend URL that used http scheme ?

This is needed for mytest1 realm to resolve the issuer problem.

15.5
Valid redirect URL should be changed to HTTPS

The keycloak-integration-app client's valid redirect URL should be changed in Keycloak UI (mytest1 realm) to
https://localhost:30000/security/oauth2

15.5
Adjust the Istio filter with HTTPS protocol scheme

X-Forwarded-Proto is set to https.
See here - keycloak-integration\security-service-poc\deploy-common\keycloak-ingress-access-https\ingress-filter.yml
Can't it be taken by Keycloak UI from the Frontend URL instead ?

Seems like the X-Forwarded-Port configuration to 30000 in ingress-filter.yml is really needed
despite having a correct port in master's realm Frontend URL. Without it Keycloak UI is not working.

15.6
Change port forwarding on VM to forward traffic from port 30000 to port 443

kubectl -n istio-system port-forward svc/istio-ingressgateway --address 0.0.0.0 30000:443

15.7
Access my app and Keycloak UI

My app access - https://localhost:30000/frontend/nested
Keycloak UI access - https://localhost:30000/auth/


